ylim(0.5, 1.1) +
theme(axis.title.x = element_text(vjust = 0.5, face = "bold"),
axis.title.y = element_text(angle = 0, vjust = 0.5, face = "bold"),
plot.title = element_text(hjust = 0.5, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, face = "italic"),
legend.position = "none") +
facet_wrap(~ model)
reduced.df <- as.data.frame(net.pca$x)
net_traffic_pca <- as.data.frame(cbind(reduced.df,
net_traffic_transformed$is_intrusion))
names(net_traffic_pca)[length(names(net_traffic_pca))] <-  "is_intrusion"
## code for developing parametric model graphs
# data frame for storing all results
k.metrics.summary <- data.frame(num.features = c(NULL),
model     = c(NULL),
mean.tpr  = c(NULL),
low.tpr   = c(NULL),
high.tpr  = c(NULL),
mean.fpr  = c(NULL),
low.fpr   = c(NULL),
high.fpr  = c(NULL),
mean.acc  = c(NULL),
low.acc   = c(NULL),
high.acc  = c(NULL),
mean.prec = c(NULL),
low.prec  = c(NULL),
high.prec = c(NULL),
mean.rec  = c(NULL),
low.rec   = c(NULL),
high.rec  = c(NULL))
k.metrics <- c()
this.fold.preds <- c()
this.fold.metrics <- c()
k.preds  <- c()
num.folds <- 10
for(k in 37:3) {
if(k == 37) {
net_traffic_pca_subset <- net_traffic_pca
} else {
net_traffic_pca_subset <- net_traffic_pca[, -c(k:37)]
}
t.score <- qt(.975, df = (num.folds - 1))
for(i in 1:5) {
model.name <- c("7nn", "svm", "logreg","nb", "default")[i]
tmp<-do_cv_class(net_traffic_pca_subset, output = "is_intrusion", num.folds, model.name)
folds.index <- unique(tmp$folds)
roc <- get_roc(tmp)
opt.roc <- optimize_roc(roc, 2)
poss.cutoffs <- sort(unique(tmp$pred), decreasing = TRUE)
opt.cutoff <- if_else(length(poss.cutoffs) >= opt.roc[[3]],
poss.cutoffs[opt.roc[[3]]],
min(poss.cutoffs[which(poss.cutoffs != 0 & poss.cutoffs != 1)]))
for(j in 1:length(folds.index)) {
this.fold.metrics <- tmp %>% subset(folds == folds.index[j]) %>% get_metrics(cutoff = opt.cutoff)
this.fold.metrics$model <- model.name
this.fold.metrics$num.features <- k
k.metrics <- rbind(k.metrics, this.fold.metrics)
this.fold.preds   <- tmp %>% subset(folds == folds.index[j])
this.fold.preds$model <- model.name
this.fold.preds$num.features <- k
k.preds <- rbind(k.preds, this.fold.preds)
}
k.metrics.summary <- rbind(k.metrics.summary,
list(num.features = k,
model     = i,
mean.tpr  = mean(k.metrics$tpr),
low.tpr   = mean(k.metrics$tpr) - (sd(k.metrics$tpr)/sqrt(num.folds)*t.score),
high.tpr  = mean(k.metrics$tpr) + (sd(k.metrics$tpr)/sqrt(num.folds)*t.score),
mean.fpr  = mean(k.metrics$fpr),
low.fpr   = mean(k.metrics$fpr) - (sd(k.metrics$fpr)/sqrt(num.folds)*t.score),
high.fpr  = mean(k.metrics$fpr) + (sd(k.metrics$fpr)/sqrt(num.folds)*t.score),
mean.acc  = mean(k.metrics$acc),
low.acc   = mean(k.metrics$acc) - (sd(k.metrics$acc)/sqrt(num.folds)*t.score),
high.acc  = mean(k.metrics$acc) + (sd(k.metrics$acc)/sqrt(num.folds)*t.score),
mean.prec  = mean(k.metrics$precision),
low.prec   = mean(k.metrics$precision) - (sd(k.metrics$precision)/sqrt(num.folds)*t.score),
high.prec  = mean(k.metrics$precision) + (sd(k.metrics$precision)/sqrt(num.folds)*t.score),
mean.rec  = mean(k.metrics$recall),
low.rec   = mean(k.metrics$recall) - (sd(k.metrics$recall)/sqrt(num.folds)*t.score),
high.rec  = mean(k.metrics$recall) + (sd(k.metrics$recall)/sqrt(num.folds)*t.score)))
}
}
acc.metrics %>%
ggplot(aes(x = num.features)) +
geom_line(aes(y = mean.acc, color = model, size = 0.03)) +
geom_line(aes(y = low.acc), linetype = "dashed", size = 0.3) +
geom_line(aes(y = high.acc), linetype = "dashed", size = 0.3) +
ggtitle("Accuracy Rate By Number of PCA Inputs", subtitle = "Illustrated with 95% Confidence Interval\nComputed Using 10-Folds Cross-Validation") +
xlab("Number of PCA Components Used As Inputs") +
ylab("Accuracy Rate\n(Average)") +
ylim(0.5, 1.1) +
theme(axis.title.x = element_text(vjust = 0.5, face = "bold"),
axis.title.y = element_text(angle = 0, vjust = 0.5, face = "bold"),
plot.title = element_text(hjust = 0.5, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, face = "italic"),
legend.position = "none") +
facet_wrap(~ model)
?linetype
acc.metrics %>%
ggplot(aes(x = num.features)) +
geom_line(aes(y = mean.acc, color = model, linetype = "solid",size = 0.03)) +
geom_line(aes(y = low.acc), linetype = "dashed", size = 0.3) +
geom_line(aes(y = high.acc), linetype = "dashed", size = 0.3) +
ggtitle("Accuracy Rate By Number of PCA Inputs", subtitle = "Illustrated with 95% Confidence Interval\nComputed Using 10-Folds Cross-Validation") +
xlab("Number of PCA Components Used As Inputs") +
ylab("Accuracy Rate\n(Average)") +
ylim(0.5, 1.1) +
theme(axis.title.x = element_text(vjust = 0.5, face = "bold"),
axis.title.y = element_text(angle = 0, vjust = 0.5, face = "bold"),
plot.title = element_text(hjust = 0.5, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, face = "italic"),
legend.position = "none") +
facet_wrap(~ model)
acc.metrics %>%
ggplot(aes(x = num.features)) +
geom_line(aes(y = mean.acc, color = model, linetype = "solid",size = 3)) +
geom_line(aes(y = low.acc), linetype = "dashed", size = 0.3) +
geom_line(aes(y = high.acc), linetype = "dashed", size = 0.3) +
ggtitle("Accuracy Rate By Number of PCA Inputs", subtitle = "Illustrated with 95% Confidence Interval\nComputed Using 10-Folds Cross-Validation") +
xlab("Number of PCA Components Used As Inputs") +
ylab("Accuracy Rate\n(Average)") +
ylim(0.5, 1.1) +
theme(axis.title.x = element_text(vjust = 0.5, face = "bold"),
axis.title.y = element_text(angle = 0, vjust = 0.5, face = "bold"),
plot.title = element_text(hjust = 0.5, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, face = "italic"),
legend.position = "none") +
facet_wrap(~ model)
acc.metrics %>%
ggplot(aes(x = num.features)) +
geom_line(aes(y = mean.acc, color = model), linetype = "solid", size = 3) +
geom_line(aes(y = low.acc), linetype = "dashed", size = 0.3) +
geom_line(aes(y = high.acc), linetype = "dashed", size = 0.3) +
ggtitle("Accuracy Rate By Number of PCA Inputs", subtitle = "Illustrated with 95% Confidence Interval\nComputed Using 10-Folds Cross-Validation") +
xlab("Number of PCA Components Used As Inputs") +
ylab("Accuracy Rate\n(Average)") +
ylim(0.5, 1.1) +
theme(axis.title.x = element_text(vjust = 0.5, face = "bold"),
axis.title.y = element_text(angle = 0, vjust = 0.5, face = "bold"),
plot.title = element_text(hjust = 0.5, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, face = "italic"),
legend.position = "none") +
facet_wrap(~ model)
acc.metrics %>%
ggplot(aes(x = num.features)) +
geom_line(aes(y = mean.acc, color = model), linetype = "solid", size = 1) +
geom_line(aes(y = low.acc), linetype = "dashed", size = 1) +
geom_line(aes(y = high.acc), linetype = "dashed", size = 1) +
ggtitle("Accuracy Rate By Number of PCA Inputs", subtitle = "Illustrated with 95% Confidence Interval\nComputed Using 10-Folds Cross-Validation") +
xlab("Number of PCA Components Used As Inputs") +
ylab("Accuracy Rate\n(Average)") +
ylim(0.5, 1.1) +
theme(axis.title.x = element_text(vjust = 0.5, face = "bold"),
axis.title.y = element_text(angle = 0, vjust = 0.5, face = "bold"),
plot.title = element_text(hjust = 0.5, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, face = "italic"),
legend.position = "none") +
facet_wrap(~ model)
acc.metrics %>%
ggplot(aes(x = num.features)) +
geom_line(aes(y = mean.acc, color = model), linetype = "solid", size = 1) +
geom_line(aes(y = low.acc), linetype = "dashed", size = 1) +
geom_line(aes(y = high.acc), linetype = "dashed", size = 1) +
ggtitle("Accuracy Rate By Number of PCA Inputs", subtitle = "Illustrated with 95% Confidence Interval\nComputed Using 10-Folds Cross-Validation") +
xlab("Number of PCA Components Used As Inputs") +
ylab("Accuracy Rate\n(Average)") +
ylim(0.5, 1.1) +
theme(axis.title.x = element_text(vjust = 0.5, face = "bold"),
axis.title.y = element_text(angle = 0, vjust = 0.5, face = "bold"),
plot.title = element_text(hjust = 0.5, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, face = "italic"),
legend.position = "none") +
facet_wrap(~ model)
acc.metrics %>%
ggplot(aes(x = num.features)) +
geom_line(aes(y = mean.acc, color = model), linetype = "solid", size = 0.8) +
geom_line(aes(y = low.acc), linetype = "dashed", size = 0.8) +
geom_line(aes(y = high.acc), linetype = "dashed", size = 0.8) +
ggtitle("Accuracy Rate By Number of PCA Inputs", subtitle = "Illustrated with 95% Confidence Interval\nComputed Using 10-Folds Cross-Validation") +
xlab("Number of PCA Components Used As Inputs") +
ylab("Accuracy Rate\n(Average)") +
ylim(0.5, 1.1) +
theme(axis.title.x = element_text(vjust = 0.5, face = "bold"),
axis.title.y = element_text(angle = 0, vjust = 0.5, face = "bold"),
plot.title = element_text(hjust = 0.5, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, face = "italic"),
legend.position = "none") +
facet_wrap(~ model)
acc.metrics %>%
ggplot(aes(x = num.features)) +
geom_line(aes(y = mean.acc, color = model), linetype = "solid", size = 0.6) +
geom_line(aes(y = low.acc), linetype = "dashed", size = 0.6) +
geom_line(aes(y = high.acc), linetype = "dashed", size = 0.6) +
ggtitle("Accuracy Rate By Number of PCA Inputs", subtitle = "Illustrated with 95% Confidence Interval\nComputed Using 10-Folds Cross-Validation") +
xlab("Number of PCA Components Used As Inputs") +
ylab("Accuracy Rate\n(Average)") +
ylim(0.5, 1.1) +
theme(axis.title.x = element_text(vjust = 0.5, face = "bold"),
axis.title.y = element_text(angle = 0, vjust = 0.5, face = "bold"),
plot.title = element_text(hjust = 0.5, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, face = "italic"),
legend.position = "none") +
facet_wrap(~ model)
acc.metrics %>%
ggplot(aes(x = num.features)) +
geom_line(aes(y = mean.acc, color = model), linetype = "solid", size = 0.7) +
geom_line(aes(y = low.acc), linetype = "dashed", size = 0.7) +
geom_line(aes(y = high.acc), linetype = "dashed", size = 0.7) +
ggtitle("Accuracy Rate By Number of PCA Inputs", subtitle = "Illustrated with 95% Confidence Interval\nComputed Using 10-Folds Cross-Validation") +
xlab("Number of PCA Components Used As Inputs") +
ylab("Accuracy Rate\n(Average)") +
ylim(0.5, 1.1) +
theme(axis.title.x = element_text(vjust = 0.5, face = "bold"),
axis.title.y = element_text(angle = 0, vjust = 0.5, face = "bold"),
plot.title = element_text(hjust = 0.5, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, face = "italic"),
legend.position = "none") +
facet_wrap(~ model)
acc.metrics %>%
ggplot(aes(x = num.features)) +
geom_line(aes(y = mean.acc, color = model), linetype = "solid", size = 0.75) +
geom_line(aes(y = low.acc), linetype = "dashed", size = 0.75) +
geom_line(aes(y = high.acc), linetype = "dashed", size = 0.75) +
ggtitle("Accuracy Rate By Number of PCA Inputs", subtitle = "Illustrated with 95% Confidence Interval\nComputed Using 10-Folds Cross-Validation") +
xlab("Number of PCA Components Used As Inputs") +
ylab("Accuracy Rate\n(Average)") +
ylim(0.5, 1.1) +
theme(axis.title.x = element_text(vjust = 0.5, face = "bold"),
axis.title.y = element_text(angle = 0, vjust = 0.5, face = "bold"),
plot.title = element_text(hjust = 0.5, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, face = "italic"),
legend.position = "none") +
facet_wrap(~ model)
# Produces bar plot for symbolic variables
# X-axis labels adjusted for readability
net_traffic %>%
ggplot(aes(x = protocol_type)) +
geom_bar() +
facet_wrap(~ is_intrusion)  +
theme(axis.text.x = element_text(hjust = 1, size = 8),
axis.text.y = element_text(angle = 0, size = 8),
axis.title.x = element_text(hjust = 0.5, size = 10, face = "bold"),
axis.title.y = element_text(vjust = 0.5, size = 10, face = "bold"),
plot.title = element_text(hjust = 0.5, face = "bold", size = 10)) -> hist.protocol
net_traffic %>%
ggplot(aes(x = service)) +
geom_bar() +
facet_wrap(~ is_intrusion)  +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8),
axis.text.y = element_text(angle = 0, size = 8),
axis.title.x = element_text(hjust = 0.5, size = 10, face = "bold"),
axis.title.y = element_text(vjust = 0.5, size = 10, face = "bold"),
plot.title = element_text(hjust = 0.5, face = "bold", size = 10)) -> hist.service
net_traffic %>%
ggplot(aes(x = flag)) +
geom_bar() +
facet_wrap(~ is_intrusion)  +
theme(axis.text.x = element_text(hjust = 1, size = 8),
axis.text.y = element_text(angle = 0, size = 8),
axis.title.x = element_text(hjust = 0.5, size = 10, face = "bold"),
axis.title.y = element_text(vjust = 0.5, size = 10, face = "bold"),
plot.title = element_text(hjust = 0.5, face = "bold", size = 10))-> hist.flag
multiplot(hist.protocol,
hist.service,
hist.flag,
cols=2)
# Produces bar plot for symbolic variables
# X-axis labels adjusted for readability
net_traffic %>%
ggplot(aes(x = protocol_type)) +
geom_bar() +
facet_wrap(~ is_intrusion)  +
theme(axis.text.x = element_text(hjust = 1, size = 8),
axis.text.y = element_text(angle = 0, size = 8),
axis.title.x = element_text(hjust = 0.5, size = 10, face = "bold"),
axis.title.y = element_text(vjust = 0.5, size = 10, face = "bold"),
plot.title = element_text(hjust = 0.5, face = "bold", size = 10)) -> hist.protocol
net_traffic %>%
ggplot(aes(x = service)) +
geom_bar() +
facet_wrap(~ is_intrusion)  +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8),
axis.text.y = element_text(angle = 0, size = 8),
axis.title.x = element_text(hjust = 0.5, size = 10, face = "bold"),
axis.title.y = element_text(vjust = 0.5, size = 10, face = "bold"),
plot.title = element_text(hjust = 0.5, face = "bold", size = 10)) -> hist.service
net_traffic %>%
ggplot(aes(x = flag)) +
geom_bar() +
facet_wrap(~ is_intrusion)  +
theme(axis.text.x = element_text(hjust = 1, size = 8),
axis.text.y = element_text(angle = 0, size = 8),
axis.title.x = element_text(hjust = 0.5, size = 10, face = "bold"),
axis.title.y = element_text(vjust = 0.5, size = 10, face = "bold"),
plot.title = element_text(hjust = 0.5, face = "bold", size = 10))-> hist.flag
multiplot(hist.protocol,
hist.service,
hist.flag,
cols=2)
multiplot(hist.protocol,
hist.service,
hist.flag,
cols=3)
```{r, fig.height=4, fig.width = 10}
# Produces bar plot for symbolic variables
# X-axis labels adjusted for readability
net_traffic %>%
ggplot(aes(x = protocol_type)) +
geom_bar() +
facet_wrap(~ is_intrusion)  +
theme(axis.text.x = element_text(hjust = 1, size = 8),
axis.text.y = element_text(angle = 0, size = 8),
axis.title.x = element_text(hjust = 0.5, size = 10, face = "bold"),
axis.title.y = element_text(vjust = 0.5, size = 10, face = "bold"),
plot.title = element_text(hjust = 0.5, face = "bold", size = 10)) -> hist.protocol
net_traffic %>%
ggplot(aes(x = service)) +
geom_bar() +
facet_wrap(~ is_intrusion)  +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8),
axis.text.y = element_text(angle = 0, size = 8),
axis.title.x = element_text(hjust = 0.5, size = 10, face = "bold"),
axis.title.y = element_text(vjust = 0.5, size = 10, face = "bold"),
plot.title = element_text(hjust = 0.5, face = "bold", size = 10)) -> hist.service
net_traffic %>%
ggplot(aes(x = flag)) +
geom_bar() +
facet_wrap(~ is_intrusion)  +
theme(axis.text.x = element_text(hjust = 1, size = 8),
axis.text.y = element_text(angle = 0, size = 8),
axis.title.x = element_text(hjust = 0.5, size = 10, face = "bold"),
axis.title.y = element_text(vjust = 0.5, size = 10, face = "bold"),
plot.title = element_text(hjust = 0.5, face = "bold", size = 10))-> hist.flag
multiplot(hist.protocol,
hist.service,
hist.flag,
cols=3)
net_traffic %>%
ggplot(aes(x = duration)) +
geom_histogram(bins = 11, binwidth = 100) +
xlim(-100, 1000) +
ylim(0, 3000) +
facet_wrap(~ is_intrusion)  +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8),
axis.text.y = element_text(angle = 0, size = 8),
axis.title.x = element_text(hjust = 0.5, size = 10, face = "bold"),
axis.title.y = element_text(vjust = 0.5, size = 10, face = "bold"),
plot.title = element_text(hjust = 0.5, face = "bold", size = 10)) -> hist.duration
net_traffic %>%
ggplot(aes(x = src_bytes)) +
geom_histogram(bins = 100) +
xlim(0, 10000) +
facet_wrap(~ is_intrusion)  +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8),
axis.text.y = element_text(angle = 0, size = 8),
axis.title.x = element_text(hjust = 0.5, size = 10, face = "bold"),
axis.title.y = element_text(vjust = 0.5, size = 10, face = "bold"),
plot.title = element_text(hjust = 0.5, face = "bold", size = 10))-> hist.srcbytes
net_traffic %>%
ggplot(aes(x = dst_bytes)) +
geom_histogram(bins = 100) +
xlim(0, 10000) +
facet_wrap(~ is_intrusion)  +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8),
axis.text.y = element_text(angle = 0, size = 8),
axis.title.x = element_text(hjust = 0.5, size = 10, face = "bold"),
axis.title.y = element_text(vjust = 0.5, size = 10, face = "bold"),
plot.title = element_text(hjust = 0.5, face = "bold", size = 10))-> hist.dstbytes
multiplot(hist.duration,
hist.srcbytes,
hist.dstbytes,
cols=2)
net_traffic %>%
ggplot(aes(x = duration)) +
geom_histogram(bins = 11, binwidth = 100) +
xlim(-100, 1000) +
ylim(0, 3000) +
facet_wrap(~ is_intrusion)  +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8),
axis.text.y = element_text(angle = 0, size = 8),
axis.title.x = element_text(hjust = 0.5, size = 10, face = "bold"),
axis.title.y = element_text(vjust = 0.5, size = 10, face = "bold"),
plot.title = element_text(hjust = 0.5, face = "bold", size = 10)) -> hist.duration
net_traffic %>%
ggplot(aes(x = src_bytes)) +
geom_histogram(bins = 100) +
xlim(0, 10000) +
facet_wrap(~ is_intrusion)  +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8),
axis.text.y = element_text(angle = 0, size = 8),
axis.title.x = element_text(hjust = 0.5, size = 10, face = "bold"),
axis.title.y = element_text(vjust = 0.5, size = 10, face = "bold"),
plot.title = element_text(hjust = 0.5, face = "bold", size = 10))-> hist.srcbytes
net_traffic %>%
ggplot(aes(x = dst_bytes)) +
geom_histogram(bins = 100) +
xlim(0, 10000) +
facet_wrap(~ is_intrusion)  +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8),
axis.text.y = element_text(angle = 0, size = 8),
axis.title.x = element_text(hjust = 0.5, size = 10, face = "bold"),
axis.title.y = element_text(vjust = 0.5, size = 10, face = "bold"),
plot.title = element_text(hjust = 0.5, face = "bold", size = 10))-> hist.dstbytes
multiplot(hist.duration,
hist.srcbytes,
hist.dstbytes,
cols=2)
net_traffic %>%
ggplot(aes(x = duration)) +
geom_histogram(bins = 11, binwidth = 100) +
xlim(-100, 1000) +
ylim(0, 3000) +
facet_wrap(~ is_intrusion)  +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8),
axis.text.y = element_text(angle = 0, size = 8),
axis.title.x = element_text(hjust = 0.5, size = 10, face = "bold"),
axis.title.y = element_text(vjust = 0.5, size = 10, face = "bold"),
plot.title = element_text(hjust = 0.5, face = "bold", size = 10)) -> hist.duration
net_traffic %>%
ggplot(aes(x = src_bytes)) +
geom_histogram(bins = 100) +
xlim(0, 10000) +
facet_wrap(~ is_intrusion)  +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8),
axis.text.y = element_text(angle = 0, size = 8),
axis.title.x = element_text(hjust = 0.5, size = 10, face = "bold"),
axis.title.y = element_text(vjust = 0.5, size = 10, face = "bold"),
plot.title = element_text(hjust = 0.5, face = "bold", size = 10))-> hist.srcbytes
net_traffic %>%
ggplot(aes(x = dst_bytes)) +
geom_histogram(bins = 100) +
xlim(0, 10000) +
facet_wrap(~ is_intrusion)  +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8),
axis.text.y = element_text(angle = 0, size = 8),
axis.title.x = element_text(hjust = 0.5, size = 10, face = "bold"),
axis.title.y = element_text(vjust = 0.5, size = 10, face = "bold"),
plot.title = element_text(hjust = 0.5, face = "bold", size = 10))-> hist.dstbytes
multiplot(hist.duration,
hist.srcbytes,
hist.dstbytes,
cols=2)
test.vals %>%
select(contains("train" , ignore.case = TRUE),
contains("k" , ignore.case = TRUE),
contains("acc" , ignore.case = TRUE)) %>%
arrange(train.review, k.value) %>%
ggplot(aes(x = k.value, y = mean.acc, group = train.review, colour = train.review)) +
geom_line() +
ggtitle("Accuracy Rate", subtitle = "Computed Using 10-Folds Cross-Validation") +
xlab("K Value") +
ylab("Accuracy Rate\n(Average)") +
theme(axis.title.x = element_text(vjust = 0.5, face = "bold"),
axis.title.y = element_text(angle = 0, vjust = 0.5, face = "bold"),
axis.text.x = element_text(size = 10),
plot.title = element_text(hjust = 0.5, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, face = "italic"),
legend.position = c(0.9, 0.7),
legend.title = element_text(hjust = 0.5, face = "bold")) +
scale_x_discrete(breaks = seq(0,300,10)) +
scale_colour_discrete(name = "Test/Train Data", breaks = c(0:1), labels = c("Test", "Train")) -> p1
test.vals %>%
select(contains("train" , ignore.case = TRUE),
contains("k" , ignore.case = TRUE),
contains("tpr" , ignore.case = TRUE)) %>%
arrange(train.review, k.value) %>%
ggplot(aes(x = k.value, y = mean.tpr, group = train.review, colour = train.review)) +
geom_line() +
ggtitle("True Positive Rate", subtitle = "Computed Using 10-Folds Cross-Validation") +
xlab("K Value") +
ylab("True Positive Rate\n(Average)") +
theme(axis.title.x = element_text(vjust = 0.5, face = "bold"),
axis.title.y = element_text(angle = 0, vjust = 0.5, face = "bold"),
axis.text.x = element_text(size = 10),
plot.title = element_text(hjust = 0.5, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, face = "italic"),
legend.position = c(0.9, 0.7),
legend.title = element_text(hjust = 0.5, face = "bold")) +
scale_x_discrete(breaks = seq(0,300,10)) +
scale_colour_discrete(name = "Test/Train Data", breaks = c(0:1), labels = c("Test", "Train")) ->p2
multiplot(p1, p1, cols = 2)
multiplot(p1, p2, cols = 2)
install.packages("rmarkdown")
install.packages("latexpdf")
?kable
remove.packages("knitr")
remove.packages("rmarkdown")
# Grab rmarkdown 1.9 and knitr 1.17
devtools::install_github("yihui/knitr@v1.17")
devtools::install_github("rstudio/rmarkdown@v1.9")
library(devtools)
install.packages("devtools")
devtools::install_github("yihui/knitr@v1.17")
devtools::install_github("rstudio/rmarkdown@v1.9")
library(rmarkdown)
library(knitr)
devtools::install_github("rstudio/rmarkdown@v1.9")
install.packages("rmarkdown")
remove.packages("latexmk")
install.packages("tinytex")
devtools::install_version("rmarkdown", version = "1.8", repos = "http://cran.us.r-project.org")
library(stringi)
install.packages("rmarkdown")
install.packages("stringi")
getwd()
library(tinytex)
library(rmarkdown)
library(git2r)
?`git2r-package`
?`git_commit-class`
?split
setwd("C:/Users/nicho/network-intrusion-detection")
